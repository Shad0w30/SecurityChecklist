{
  "web": [
    {
      "name": "Authentication",
      "controls": [
        "Use HTTPS everywhere."
        "Store password hashes using Bcrypt (no salt necessary - Bcrypt does it for you)."
        "Destroy the session identifier after logout."
        "Destroy all active sessions on reset password (or offer to)."
        "Must have the state parameter in OAuth2."
        "No open redirects after successful login or in any other intermediate redirects."
        "When parsing Signup/Login input, sanitize for javascript://, data://, CRLF characters."
        "Set secure, httpOnly cookies."
        "In Mobile OTP based mobile verification, do not send the OTP back in the response when generate OTP or Resend OTP API is called."
        "Limit attempts to Login, Verify OTP, Resend OTP and generate OTP APIs for a particular user. Have an exponential backoff set or/and something like a captcha based challenge."
        "Check for randomness of reset password token in the emailed link or SMS."
        "Set an expiration on the reset password token for a reasonable period."
        "Expire the reset token after it has been successfully used."
      ]
    },
    {
      "name": "Authorization",
      "controls": [
        "Implement least privilege principle for all roles",
        "Use role-based access control (RBAC)",
        "Implement attribute-based access control (ABAC) where needed",
        "Enforce access control checks on every request",
        "Protect against IDOR (Insecure Direct Object Reference)",
        "Implement proper admin interface security",
        "Segregate duties for sensitive operations",
        "Implement time-based access restrictions",
        "Enforce location-based access controls where appropriate",
        "Implement proper access control for APIs"
        "Any resource access like, my cart, my history should check the logged in user's ownership of the resource using session id."
        "Serially iterable resource id should be avoided. Use /me/orders instead of /user/37153/orders. This acts as a sanity check in case you forgot to check for authorization token."
        "Edit email/phone number feature should be accompanied by a verification email to the owner of the account."
        "Any upload feature should sanitize the filename provided by the user. Also, for generally reasons apart from security, upload to something like S3 (and post-process using lambda) and not your own server capable of executing code."
        "Profile photo upload feature should sanitize all the EXIF tags also if not required."
        "For user ids and other ids, use RFC compliant UUID instead of integers. You can find an implementation for this for your language on Github."
        "JWT are awesome. Use them if required for your single page app/APIs."
      ]
    },
    {
      "name": "Input Validation",
      "controls": [
        "Validate all user inputs on server side",
        "Implement allow-list validation approach",
        "Sanitize all inputs before processing",
        "Validate content type for file uploads",
        "Implement maximum length constraints",
        "Use parameterized queries for database access",
        "Validate and sanitize HTML output",
        "Protect against SQL injection attacks",
        "Prevent cross-site scripting (XSS) vulnerabilities",
        "Protect against command injection attacks"
        "Sanitize all user inputs or any input parameters exposed to user to prevent XSS."
        "Always use parameterized queries to prevent SQL Injection."
        "Sanitize user input if using it directly for functionalities like CSV import."
        "Sanitize user input for special cases like robots.txt as profile names in case you are using a url pattern like coolcorp.io/username."
        "Do not hand code or build JSON by string concatenation ever, no matter how small the object is. Use your language defined libraries or framework."
        "Sanitize inputs that take some sort of URLs to prevent SSRF."
        "Sanitize Outputs before displaying to users."
      ]
    }
    {
      "name": "Datebase",
      "controls": [
        "Use encryption for data identifying users and sensitive data like access tokens, email addresses or billing details."
        "If your database supports low cost encryption at rest (like AWS Aurora), then enable that to secure data on disk. Make sure all backups are stored encrypted as well."
        "Use minimal privilege for the database access user account. Don’t use the database root account."
        "Store and distribute secrets using a key store designed for the purpose. Don’t hard code in your applications."
        "Fully prevent SQL injection by only using SQL prepared statements. For example: if using NPM, don’t use npm-mysql, use npm-mysql2 which supports prepared statements."
      ]
    }
    {
      "name": "Security Headers & Configuration",
      "controls": [
        "Add CSP header to mitigate XSS and data injection attacks. This is important."
        "Add CSRF header to prevent cross site request forgery. Also add SameSite attributes on cookies."
        "Add HSTS header to prevent SSL stripping attack."
        "Add your domain to the HSTS Preload List"
        "Add X-Frame-Options to protect against Clickjacking."
        "Add X-XSS-Protection header to mitigate XSS attacks."
        "Update DNS records to add SPF record to mitigate spam and phishing attacks."
        "Add subresource integrity checks if loading your JavaScript libraries from a third party CDN. For extra security, add the require-sri-for CSP-directive so you don't load resources that don't have an SRI sat."
        "Use random CSRF tokens and expose business logic APIs as HTTP POST requests. Do not expose CSRF tokens over HTTP for example in an initial request upgrade phase."
        "Do not use critical data or tokens in GET request parameters. Exposure of server logs or a machine/stack processing them would expose user data in turn."
      ]
    }
    {
      "name": "Input Validation",
      "controls": [
        "Make sure that DOS attacks on your APIs won’t cripple your site. At a minimum, have rate limiters on your slower API paths like login and token generation routines. Consider CAPTCHA on front-end APIs to protect back-end services against DOS."
        "Enforce sanity limits on the size and structure of user submitted data and requests."
        "Use Distributed Denial of Service (DDOS) mitigation via a global caching proxy service like CloudFlare. This can be turned on if you suffer a DDOS attack and otherwise function as your DNS lookup."
      ]
    }
  ],
  "mobile": [
    {
      "name": "Data Storage",
      "controls": [
        "Use secure storage for sensitive data",
        "Encrypt sensitive data at rest",
        "Avoid storing sensitive data in plain text",
        "Use Keychain (iOS) and Keystore (Android)",
        "Implement secure file storage practices",
        "Protect against insecure data storage",
        "Use encrypted databases when needed",
        "Secure app-specific storage areas",
        "Implement proper cache management",
        "Clear sensitive data from memory after use"
      ]
    },
    {
      "name": "Authentication",
      "controls": [
        "Implement biometric authentication securely",
        "Use secure token storage",
        "Implement session timeout",
        "Protect against credential caching",
        "Secure authentication tokens",
        "Implement multi-factor authentication",
        "Protect against insecure authentication"
      ]
    }
  ],
  "API": [
    {
      "name": "Authentication",
      "controls": [
       "Don't use Basic Auth. Use standard authentication instead (e.g., JWT)."
       "Don't reinvent the wheel in Authentication, token generation, password storage. Use the standards."
       "Use Max Retry and jail features in Login."
       "Use encryption on all sensitive data."
      ]
    },
    {
      "name": "Authorization",
      "controls": [
        "Always validate redirect_uri server-side to allow only safelisted URLs."
        "Always try to exchange for code and not tokens (don't allow response_type=token)."
        "Use state parameter with a random hash to prevent CSRF on the OAuth authorization process."
        "Define the default scope, and validate scope parameters for each application."
      ]
    },
    {
      "name": "JWT",
      "controls": [
        "Always validate redirect_uri server-side to allow only safelisted URLs."
        "Always try to exchange for code and not tokens (don't allow response_type=token)."
        "Use state parameter with a random hash to prevent CSRF on the OAuth authorization process."
        "Define the default scope, and validate scope parameters for each application."
      ]
    },
    {
      "name": "Authorization",
      "controls": [
        "Always validate redirect_uri server-side to allow only safelisted URLs."
        "Always try to exchange for code and not tokens (don't allow response_type=token)."
        "Use state parameter with a random hash to prevent CSRF on the OAuth authorization process."
        "Define the default scope, and validate scope parameters for each application."
      ]
    },
    {
      "name": "Authorization",
      "controls": [
        "Always validate redirect_uri server-side to allow only safelisted URLs."
        "Always try to exchange for code and not tokens (don't allow response_type=token)."
        "Use state parameter with a random hash to prevent CSRF on the OAuth authorization process."
        "Define the default scope, and validate scope parameters for each application."
      ]
    },
    {
      "name": "Authorization",
      "controls": [
        "Always validate redirect_uri server-side to allow only safelisted URLs."
        "Always try to exchange for code and not tokens (don't allow response_type=token)."
        "Use state parameter with a random hash to prevent CSRF on the OAuth authorization process."
        "Define the default scope, and validate scope parameters for each application."
      ]
    }
  ],
  "cloud": [
    {
      "name": "AWS Security",
      "controls": [
        "Implement IAM roles and policies with least privilege",
        "Enable CloudTrail logging for all regions",
        "Use AWS Config for resource tracking",
        "Enable GuardDuty for threat detection",
        "Implement VPC security groups properly",
        "Encrypt S3 buckets and enable versioning",
        "Use AWS KMS for encryption key management",
        "Enable multi-factor authentication for root account",
        "Implement security groups and NACLs properly",
        "Regularly rotate access keys and credentials"
      ]
    },
    {
      "name": "Azure Security",
      "controls": [
        "Implement Azure AD with conditional access",
        "Use Azure Security Center for monitoring",
        "Enable Azure Defender for advanced protection",
        "Implement network security groups properly",
        "Use Azure Key Vault for secrets management",
        "Enable Azure Monitor and Log Analytics",
        "Implement Azure Policy for compliance",
        "Use managed identities for resources",
        "Enable JIT VM access with Azure Security Center",
        "Encrypt storage accounts and virtual disks"
      ]
    },
    {
      "name": "GCP Security",
      "controls": [
        "Implement Cloud Identity and Access Management",
        "Use VPC Service Controls for data isolation",
        "Enable Security Command Center",
        "Use Cloud KMS for encryption key management",
        "Implement Cloud Audit Logging for all services",
        "Use Identity-Aware Proxy for secure access",
        "Implement firewall rules with least privilege",
        "Enable Data Loss Prevention API",
        "Use Cloud Security Scanner for vulnerabilities",
        "Implement organization policies for compliance"
      ]
    }
  ],
  "cert": [
    {
      "name": "CISSP",
      "controls": [
        "Security and Risk Management concepts",
        "Asset Security classification and protection",
        "Security Architecture and Engineering principles",
        "Communication and Network Security",
        "Identity and Access Management controls",
        "Security Assessment and Testing methodologies",
        "Security Operations best practices",
        "Software Development Security principles",
        "Legal, regulations, and compliance requirements",
        "Incident response and disaster recovery planning"
      ]
    },
    {
      "name": "CISM",
      "controls": [
        "Information Security Governance framework",
        "Information Risk Management practices",
        "Information Security Program development",
        "Incident Management and response",
        "Security metrics and reporting",
        "Compliance management strategies",
        "Security policy development",
        "Business continuity planning",
        "Vendor and third-party risk management",
        "Security awareness and training programs"
      ]
    },
    {
      "name": "CCSP",
      "controls": [
        "Cloud Concepts, Architecture and Design",
        "Cloud Data Security principles",
        "Cloud Platform and Infrastructure Security",
        "Cloud Application Security best practices",
        "Cloud Security Operations",
        "Legal, Risk and Compliance in cloud",
        "Secure cloud migration strategies",
        "Cloud identity and access management",
        "Cloud encryption and key management",
        "Incident response in cloud environments"
      ]
    }
  ]
}
